// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  inventoryItems InventoryItem[]
  sales         Sale[]
  reports       Report[]
  
  @@map("users")
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  inventoryItems InventoryItem[]
  
  @@map("categories")
}

model InventoryItem {
  id            String    @id @default(cuid())
  name          String
  description   String?
  upc           String?   @unique
  sku           String?   @unique
  costPrice     Decimal   @db.Decimal(10, 2)
  salePrice     Decimal   @db.Decimal(10, 2)
  quantity      Int       @default(0)
  minQuantity   Int       @default(0)
  maxQuantity   Int?
  condition     Condition @default(NEW)
  location      String?
  imageUrl      String?
  tags          String[]  @default([])
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  saleItems     SaleItem[]
  
  @@map("inventory_items")
}

model Sale {
  id            String    @id @default(cuid())
  saleNumber    String    @unique
  customerId    String?
  customerName  String?
  customerEmail String?
  subtotal      Decimal   @db.Decimal(10, 2)
  tax           Decimal   @db.Decimal(10, 2) @default(0)
  discount      Decimal   @db.Decimal(10, 2) @default(0)
  total         Decimal   @db.Decimal(10, 2)
  status        SaleStatus @default(PENDING)
  paymentMethod PaymentMethod?
  notes         String?
  saleDate      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  saleItems     SaleItem[]
  
  @@map("sales")
}

model SaleItem {
  id            String    @id @default(cuid())
  quantity      Int
  unitPrice     Decimal   @db.Decimal(10, 2)
  totalPrice    Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  
  // Relations
  saleId        String
  sale          Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  inventoryItemId String
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  
  @@map("sale_items")
}

model Report {
  id            String    @id @default(cuid())
  name          String
  type          ReportType
  parameters    Json?
  generatedData Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  @@map("reports")
}

enum Role {
  USER
  ADMIN
}

enum Condition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
}

enum SaleStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CHECK
  OTHER
}

enum ReportType {
  INVENTORY_SUMMARY
  TOP_SELLING_ITEMS
  LOW_INVENTORY
  HIGH_INVENTORY
  PROFIT_ANALYSIS
  SALES_SUMMARY
  CUSTOMER_REPORT
  MONTHLY_REPORT
  YEARLY_REPORT
}
